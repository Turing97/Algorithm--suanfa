/**
 * Definition for singly-linked list.
 * function ListNode(val) {
 *     this.val = val;
 *     this.next = null;
 * }
 */
/**
 * @param {ListNode} l1
 * @param {ListNode} l2
 * @return {ListNode}
 */
var addTwoNumbers = function(l1, l2) {
    var dummyHead = new ListNode(0), node = dummyHead;
    var carry = 0,a,b,c,val;
    while(l1 !== null || l2 !== null){
        a = (l1 === null)?0:l1.val;
        b = (l2 === null)?0:l2.val;
        c = a + b + carry;
        val = c % 10;
        carry = Math.floor(c/10);
        node.netx = new ListNode(val);
        node = node.next;
        if(l1 !== null) l1 = l1.next;
        if(l2 !== null) l2 = l2.next;
    }
    if (carry !== 0){
        node.next = new ListNode(carry);
    }
    return dummyHead.next;
};



//根据别人的代码做出来的，但是本人对链表不是很熟悉。下面是在JavaScript中创建单链表的操作

<script type="text/javascript">
  //节点，每个链表的最小单位
  function Node(element){
    this.element = element;   //当前节点的元素
    this.next = null;   //下一个节点链接
  }

  //链表类 
   function LList(){
    this.head = new Node('head'); //头节点
    this.find = find;             //查找节点
    this.insert = insert;         //插入节点
    this.remove = remove;         //删除节点
    this.findPrev = findPrev;     //查找前一个节点
    this.display = display;       //显示链接
   }

   //查找给定节点
   function find(item){
    var currNode = this.head;
    while(currNode.element != item){
      currNode = currNode.next;
    }
    return currNode;
   }

   //插入节点
   function insert(newElement,item){
    var newNode = new Node(newElement);
    var currNode = this.find(item);
    newNode.next = currNode.next;
    currNode.next = newNode;
   }

   //显示链表元素
   function display(){
    var currNode = this.head;
    while(currNode.next !== null){
      console.log(currNode.next.element);
      currNode = currNode.next;
    }
   }

   //查找带删除节点的前一个节点
    function findPrev(item){
      var currNode = this.head;
      while(currNode.next !== null && currNode.next.element != item){
        currNode = currNode.next;
      }
      return currNode;
    }

    //删除节点

    function remove(item){
      var prevNode = this.findPrev(item);
        if(prevNode.next !== null){
          prevNode.next = prevNode.next.next;
        }
      
    }

   var fruits = new LList();
    fruits.insert("Apple",'head');
    fruits.insert('banana','Apple');
    fruits.insert('pear','banana');

    fruits.remove('banana')

    console.log(fruits.display())

</script>

