//自己所做的算法，先将字符串转换成数字数组然后一项一项的加起来  但是由于测试用例所涉及到的字符串过长，转化为数字会异常，所以通过不了。必须寻找其他办法。
/**
 * @param {string} a
 * @param {string} b
 * @return {string}
 */
var addBinary = function(a, b) {
    if(b.length> a.length){
        var temp = b;
        b = a;
        a = temp
    }
    //console.log(a)
    a = toNums(a);
    b = toNums(b);
    if(a==0 && b==0){
        return "0"
    }
    if(a==0){
        return b.join('')
    }
    if(b==0){
        return a.join('')
    }
    console.log(a)
    //console.log(b)
    var count =0
    for(var i = b.length-1;i>=0;i--){
        var k = a.length-1-count;
        a[k] +=b[i]
        //console.log(a[k])
        while(a[k]>1){
            a[k] = 0;
            if(k-1<0){
                a.unshift(1);
            }
            else{
                a[k-1] = a[k-1]+1;
                k--
            }
        }
        count++
    }
    return a.join('')
   
    
};
function toNums(num){
    num = parseInt(num)
    var i = 0;
    var a = []
    while(num != 0){
        a[i] = num%10;
        num = Math.floor(num/10);
        i++;
    }
    return a.reverse()
    
}





//经过学习之后，看了一下别的解法之后结果是这样
/**
 * @param {string} a
 * @param {string} b
 * @return {string}
 */
var addBinary = function(a, b) {
    var res =[];    //结果数组
    var addOne = 0;//是否进位
    
    //两数组对齐
    while(a.length > b.length){
        b = "0"+b
    }
    while(a.length < b.length){
        a = "0"+a
    }
    
    for(var i=a.length-1;i>=0;i--){
        res[i] = parseInt(a[i]) + parseInt(b[i])+ addOne;
        if(res[i] > 2){
            res[i] = 1;
            addOne =1;
        }
        else if(res[i] > 1){
            res[i] = 0;
            addOne = 1;
        }
        else{
            addOne = 0;
        }
        
    }
    if(addOne === 1){
        res.unshift(1);
    }
    return res.join('')
    
};
